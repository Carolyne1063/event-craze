// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())  
  firstName String  
  lastName  String  
  phoneNo   String   @unique  
  email     String   @unique  
  password  String  
  bookings  Booking[]  
  reviews   Review[]  
  createdAt DateTime @default(now())  
  updatedAt DateTime @updatedAt 
  role      String @default("USER") // Default role is 'USER' 
}

model Event {
  id          String   @id @default(uuid())  
  eventName   String  
  date        DateTime  
  time        String  
  location    String  
  description String  
  totalTickets Int     
  tickets     Ticket[]  
  bookings    Booking[]  
  reviews     Review[]  
  createdAt   DateTime @default(now())  
  updatedAt   DateTime @updatedAt  
}

model Ticket {
  id        String   @id @default(uuid())  
  type      String  
  quantity  Int      
  price     Decimal  
  eventId   String  
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade, onUpdate: Cascade)  
  bookings  Booking[]  
  createdAt DateTime @default(now())  
  updatedAt DateTime @updatedAt  
}

model Booking {
  id        String   @id @default(uuid())  
  userId    String  
  user      User     @relation(fields: [userId], references: [id])  
  eventId   String  
  event     Event    @relation(fields: [eventId], references: [id], onDelete: NoAction, onUpdate: NoAction)  
  ticketId  String  
  ticket    Ticket   @relation(fields: [ticketId], references: [id], onDelete: NoAction, onUpdate: NoAction) 
  ticketType  String 
  quantity  Int      
  totalPrice Decimal  
  payments  Payment[]
  createdAt DateTime @default(now())  
  updatedAt DateTime @updatedAt  
}

model Review {
  id        String   @id @default(uuid())  
  userId    String  
  user      User     @relation(fields: [userId], references: [id])  
  eventId   String  
  event     Event    @relation(fields: [eventId], references: [id])  
  rating    Int      
  comment   String?  
  createdAt DateTime @default(now())  
  updatedAt DateTime @updatedAt  
}

model Payment {
  id        String         @id @default(uuid())
  phoneNo    String
  trnxId    String
  amount    Decimal        @db.Decimal(10, 2)
  status    String
  bookingId String?        // Optional: Link this payment to a booking, if available.
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  booking   Booking?      @relation(fields: [bookingId], references: [id])
}

